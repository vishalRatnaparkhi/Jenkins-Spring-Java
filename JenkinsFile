pipeline {
  agent { label 'Jenkins-Agent'}
tools{
jdk 'Java17'
maven 'Maven3'
}

environment{ 
APP_NAME="jenkins-spring-java"
RELEASE="1.0.0"
DOCKER_USER="ratnparkhiv"
DOCKER_PASS="dockerhub"
IMAGE_NAME="${DOCKER_USER}" + "/" + "${APP_NAME}"
IMAGE_TAG="${RELEASE}-${BUILD_NUMBER}"
}
stages{
stage("Cleanup Workspace"){
steps{
cleanWs()
}
}
stage("Checkout Form SCM"){
steps{
git branch:'master', credentialsId:'github', url:'https://github.com/vishalratn/Jenkins-Spring-Java.git'
}
}

stage("Build Application"){
steps{
sh 'mvn clean package'
}

}
stage("Test Application"){
steps{
sh 'mvn test'
}

}
stage("SonarQube Analysis"){
steps{
script{
withSonarQubeEnv(credentialsId:'jenkins-sonarqube-token'){
sh 'mvn sonar:sonar'
}
}
}

}

stage("Quality Gate "){
steps{
script{
waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
}
}

}

stage("Build & Push Docker Image to DockerHub "){
steps{
script{
docker.withRegistry('',DOCKER_PASS ){
docker_image=docker.build "${IMAGE_NAME}"
}

docker.withRegistry('',DOCKER_PASS){
docker_image.push("${IMAGE_TAG}")
docker_image.push('latest')
}

}
}

}

stage("Trivy Scan "){
steps{
script{
sh ('docker run -v /var/run/docker.sock:/var/ru-n/docker.sock aquasec/trivy image ratnparkhiv/jenkins-spring-java:latest --no-progress -scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table')
}
}

}

stage("Cleanup Artifacts "){
steps{
script{
sh " docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
sh " docker rmi ${IMAGE_NAME}:latest"
}
}

}

}
}
